buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'

ext {
    if (mc_minor == "0") {
        mc_version = "1.${mc_major}"
    } else {
        mc_version = "1.${mc_major}.${mc_minor}"
    }
}

version = "${mc_version}-${major}.${minor}.${patch}"
group = mod_id
archivesBaseName = "${mod_name.replaceAll(' ','')}"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    mappings = "stable_39"
}

repositories {
    maven { url "http://dvs1.progwml6.com/files/maven" }
    maven { url "http://maven.blamejared.com/" }
    maven { url "http://maven.thiakil.com" }
    maven { url "http://maven.cil.li/" }
}

dependencies {
    // Mod APIs
    compile fileTree(dir: 'lib', include: ['*.jar'])

    deobfCompile "slimeknights.mantle:Mantle:1.${mc_major}+"
    deobfCompile "com.azanor.baubles:Baubles:1.${mc_major}+"
    deobfCompile "blusunrize:ImmersiveEngineering:0.${mc_major}+"

    deobfCompile "li.cil.oc:OpenComputers:MC${mc_version}+"
    deobfCompile "li.cil.tis3d:TIS-3D:MC${mc_version}+"
    
    deobfCompile "vazkii.autoreglib:AutoRegLib:1.3+"
    deobfCompile "vazkii.patchouli:Patchouli:1.0-20+"
    deobfCompile "vazkii.botania:Botania:r1.10-363+"

    // Runtime
    runtime "slimeknights:TConstruct:${mc_version}+@jar"
    runtime "mezz.jei:jei_${mc_version}:+"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand ([
        	'version': "${major}.${minor}.${patch}",
        	'mcversion': mc_version,
        	'modid': mod_id,
        	'name': mod_name,
        	'forge': forge_version
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

jar {
    manifest {
        attributes 'FMLAT': "${mod_id}_at.cfg"
    }
    finalizedBy reobfJar
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes 'FMLAT': '${mod_id}_at.cfg'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId "astavie"
            artifactId mod_id
            version project.version

            artifact jar
            artifact deobfJar
            artifact sourcesJar
        }
    }
}

publishing {
    repositories {
        maven {
            url "/home/arie/Code/Maven"
        }
    }
}

task pushMaven(type: Exec) {
    workingDir '/home/arie/Code/Maven'
    commandLine 'bash', 'push.sh', "astavie/${mod_id}", "Maven, ${mod_name}, ${project.version}"
}

task incrementBuild {
	doLast {
		config.mod_build = config.mod_build.toString().toInteger() + 1
		configFile.withWriter {
			config.toProperties().store(it, "")
		}
	}
}

static def parseConfig(File config) {
	config.withReader {
		def prop = new Properties()
		prop.load(it)
		return new ConfigSlurper().parse(prop)
	}
}

publish.dependsOn incrementBuild
pushMaven.dependsOn publish

defaultTasks 'clean', 'build'
